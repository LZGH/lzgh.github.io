<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Python实现根据页码切割pdf]]></title>
      <url>https://lzgh.github.io/2016/12/27/split-pdf/</url>
      <content type="html"><![CDATA[<blockquote>
<p>网上有一些切割pdf的工具，有的收费，有的打水印，有的限制100M以下，不如自己写一个。</p>
</blockquote>
<p>该脚本使用的库是PyPDF2,可以在<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a> 下载，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;根据输入页码，切割pdf&apos;&apos;&apos;</div><div class="line">from PyPDF2 import PdfFileWriter, PdfFileReader</div><div class="line"></div><div class="line"></div><div class="line">def main():</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    Function:切割pdf</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    page_str = &quot;1-23,24-44&quot;</div><div class="line">    file_name = &quot;Tridium Case Study_ 2015June.pdf&quot;</div><div class="line"></div><div class="line">    name = file_name.split(&quot;.&quot;)</div><div class="line"></div><div class="line">    target_file = PdfFileReader(open(file_name, &quot;rb&quot;))</div><div class="line"></div><div class="line">    page_group = page_str.split(&apos;,&apos;)</div><div class="line">    for num, key in enumerate(page_group):</div><div class="line">        output = PdfFileWriter()</div><div class="line">        page_start_end = key.split(&apos;-&apos;)</div><div class="line">        for i in range(int(page_start_end[0]), int(page_start_end[1]) + 1):</div><div class="line">            output.addPage(target_file.getPage(i))</div><div class="line">        out_put_stream = open(name[0] + str(num + 1) + &quot;.pdf&quot;, &quot;wb&quot;)</div><div class="line">        output.write(out_put_stream)</div><div class="line">        out_put_stream.close()</div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">    main()</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[emacs基本快捷键]]></title>
      <url>https://lzgh.github.io/2016/10/31/emacs%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>为了方便安利emacs，列一些最基本快捷键。 </p>
</blockquote>
<h3 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h3><p>C 表示Ctrl，M 表示Alt，S 表示Shift<br>C-x C-f 表示先按下Ctrl键和x，再按下Ctrl键和f键<br>M-S-RET 表示同时按下Alt、Shift和回车键</p>
<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p>emacs最小化：C-z<br>退出emacs：C-x C-c<br>取消未完成的命令：C-g</p>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>打开文件：C-x C-f<br>保存文件：C-x C-s<br>创建文件：C-x C-f 输入文件名回车确认<br>另存为：C-x C-w</p>
<h3 id="编辑快捷键"><a href="#编辑快捷键" class="headerlink" title="编辑快捷键"></a>编辑快捷键</h3><p>复制：M-w<br>粘贴：C-y<br>剪切：C-w<br>全选：C-x h</p>
<h3 id="运行代码快捷键"><a href="#运行代码快捷键" class="headerlink" title="运行代码快捷键"></a>运行代码快捷键</h3><p>运行：C-c<br>编译(java)：C-c</p>
<h3 id="缓冲区操作"><a href="#缓冲区操作" class="headerlink" title="缓冲区操作"></a>缓冲区操作</h3><p>前一个buffer：C-x ←<br>后一个buffer：C-x →<br>buffer列表：C-x b</p>
<h3 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h3><p>保留一个窗口：C-x 1<br>垂直分割窗口：C-x 2<br>水平分割窗口：C-x 3</p>
<h3 id="org模式快捷键"><a href="#org模式快捷键" class="headerlink" title="org模式快捷键"></a>org模式快捷键</h3><p>循环切换光标所在大纲状态：TAB<br>循环切换整个文档大纲状态：S-TAB<br>插入同级列表项：M-RET<br>插入同级TODO列表项：M-S-RET<br>改变列表项层级关系：M-left/right<br>上下移动列表项：M-up/down<br>TODO/DOWN切换：S-left/right<br>改变任务等级：S-up/down </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Netty入门]]></title>
      <url>https://lzgh.github.io/2016/10/13/netty-start/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文记录自己Netty的学习过程<br>搭建过程参考自：<a href="http://netty.io/wiki/user-guide-for-5.x.html" target="_blank" rel="external">Netty用户指南</a></p>
</blockquote>
<h3 id="1-搭建一个简单的服务端"><a href="#1-搭建一个简单的服务端" class="headerlink" title="1.搭建一个简单的服务端"></a>1.搭建一个简单的服务端</h3><p>Netty用户指南提供了demo以及讲解，跟着操作就行。<br>为了方便阅读源码，通过Maven将Netty配置到项目中去。配置Netty依赖代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;io.netty&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;netty-all&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;5.0.0.Alpha2&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>创建DiscardServerHandler类，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Handles a server-side channel.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscardServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</div><div class="line">        ByteBuf in = (ByteBuf) msg;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">while</span> (in.isReadable()) &#123;</div><div class="line">                System.out.print((<span class="keyword">char</span>) in.readByte());</div><div class="line">                System.out.flush();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            ReferenceCountUtil.release(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123;</div><div class="line">        <span class="comment">// Close the connection when an exception is raised.</span></div><div class="line">        cause.printStackTrace();</div><div class="line">        ctx.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建DiscardServer类，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscardServer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DiscardServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.port = port;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(); <span class="comment">// (1)</span></div><div class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap(); <span class="comment">// (2)</span></div><div class="line">            b.group(bossGroup, workerGroup)</div><div class="line">                    .channel(NioServerSocketChannel.class) <span class="comment">// (3)</span></div><div class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123; <span class="comment">// (4)</span></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> DiscardServerHandler());</div><div class="line">                        &#125;</div><div class="line">                    &#125;)</div><div class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)          <span class="comment">// (5)</span></div><div class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>); <span class="comment">// (6)</span></div><div class="line"></div><div class="line">            <span class="comment">// Bind and start to accept incoming connections.</span></div><div class="line">            ChannelFuture f = b.bind(port).sync(); <span class="comment">// (7)</span></div><div class="line"></div><div class="line">            <span class="comment">// Wait until the server socket is closed.</span></div><div class="line">            <span class="comment">// In this example, this does not happen, but you can do that to gracefully</span></div><div class="line">            <span class="comment">// shut down your server.</span></div><div class="line">            f.channel().closeFuture().sync();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            workerGroup.shutdownGracefully();</div><div class="line">            bossGroup.shutdownGracefully();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">int</span> port;</div><div class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</div><div class="line">            port = Integer.parseInt(args[<span class="number">0</span>]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            port = <span class="number">8080</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">new</span> DiscardServer(port).run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行DiscardServer中的main方法，Netty服务端就启动了。<br>在命令行输入<code>telnet localhost 8080</code>，然后随意输入一些字符，Java控制台将输出这些字符，效果如下：<br><img src="http://obp3vkygi.qnssl.com/static/images/netty_print.png"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[solr6.2结合oracle提供实时数据的全文检索服务]]></title>
      <url>https://lzgh.github.io/2016/09/27/solr/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文介绍solr6.2搭建oracle全文检索服务以及中文分词和实时增量数据导入配置。<br>solr说明文档地址：<a href="https://cwiki.apache.org/confluence/display/solr/" target="_blank" rel="external">参考文档</a><br>solr官方下载地址：<a href="http://archive.apache.org/dist/lucene/solr/" target="_blank" rel="external">下载地址</a>，下载目前最新版6.2.1</p>
</blockquote>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Solr是一个高性能，采用Java5开发，基于的全文搜索服务器。同时对其进行了扩展，提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展并对查询性能进行了优化，并且提供了一个完善的功能管理界面，是一款非常优秀的全文搜索引擎。</p>
<h3 id="启动Solr"><a href="#启动Solr" class="headerlink" title="启动Solr"></a>启动Solr</h3><p>该版本solr需要环境jdk1.8及以上，新版的solr自带jetty服务器，可以独立运行.<br>将下载好的压缩包解压后，打开命令窗口，进入solr-6.2.1\bin目录,执行<code>solr start</code>启动服务,<br>启动成功后，浏览器中输入 <a href="http://localhost:8983/solr" target="_blank" rel="external">http://localhost:8983/solr</a> 可以看到如下图所示的solr管理界面<br><img src="http://obp3vkygi.qnssl.com/static/images/solr_start.png"></p>
<h3 id="solr常用命令"><a href="#solr常用命令" class="headerlink" title="solr常用命令"></a>solr常用命令</h3><blockquote>
<p>bin/solr start  -help     查看start帮助<br>bin/solr start            启动单机版<br>bin/solr restart -p 8983  重启项目<br>bin/solr create -help     查看create帮助<br>bin/solr create -c abc    创建core</p>
</blockquote>
<h3 id="创建core"><a href="#创建core" class="headerlink" title="创建core"></a>创建core</h3><a id="more"></a>
<p><code>solr create -c les</code>创建一个core,创建成功后，在solr-6.2.1\server\solr文件夹下出现les文件夹，<br>重新启动solr，刷新solr控制台，core selector处选择刚才添加的core<br><img src="http://obp3vkygi.qnssl.com/static/images/solr_core_select.png"><br>选择后，出现core的操作列表<br><img src="http://obp3vkygi.qnssl.com/static/images/solr_core_list.png"></p>
<h4 id="常用菜单作用："><a href="#常用菜单作用：" class="headerlink" title="常用菜单作用："></a>常用菜单作用：</h4><blockquote>
<p>Analysis 可以测试分词效果<br>Dataimport 数据导入导入数据<br>Query      数据查询</p>
</blockquote>
<h4 id="常用solr查询参数介绍："><a href="#常用solr查询参数介绍：" class="headerlink" title="常用solr查询参数介绍："></a>常用solr查询参数介绍：</h4><blockquote>
<p>q     查询关键字，默认为q=<em>:</em>，不能为空<br>fq     在q查询的结果中过滤查询,fq=type:1<br>fl     指定返回哪些字段，用逗号或空格分隔，注意：字段区分大小写，例如，fl= id,title,sort<br>start  返回结果的第几条记录开始，一般分页用，默认0开始<br>rows   指定返回结果最多有多少条记录，默认值为 10，配合start实现分页<br>sort   排序方式，例如id  desc 表示按照 “id” 降序<br>wt     指定输出格式，有 xml, json, php等</p>
</blockquote>
<h4 id="常用solr检索运算符："><a href="#常用solr检索运算符：" class="headerlink" title="常用solr检索运算符："></a>常用solr检索运算符：</h4><blockquote>
<p>‘?’   单个任意字符的通配，如type:?1<br>‘*’   多个任意字符的通配<br>‘~’   模糊检索<br>‘+’   存在操作符<br>AND、&amp;&amp;、OR、||  布尔操作符  如q=type:1 or type:2 java发出请求时，可用+号代替空格，否则会报错q=type:1+or+type:2<br>NOT、!、- 排除操作符不能单独与项使用构成查询<br>()  用于构成子查询<br>[]  包含范围检索，如检索某时间段记录，包含头尾，date:[201507 TO 201510]<br>{}  不包含范围检索，如检索某时间段记录，不包含头尾date:{201507 TO 201510}</p>
</blockquote>
<h3 id="配置dataimport"><a href="#配置dataimport" class="headerlink" title="配置dataimport"></a>配置dataimport</h3><p>将solr-6.2.1\dist文件夹下的solr-dataimporthandler-6.2.1.jar拷贝到solr-6.2.1\server\solr-webapp\webapp\WEB-INF\lib文件夹下<br>打开les/conf文件夹下的solrconfig.xml,745行添加配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;requestHandler name=&quot;/dataimport&quot; class=&quot;solr.DataImportHandler&quot;&gt;</div><div class="line">  &lt;lst name=&quot;defaults&quot;&gt;</div><div class="line">    &lt;str name=&quot;config&quot;&gt;db-data-config.xml&lt;/str&gt;</div><div class="line">  &lt;/lst&gt;</div><div class="line">&lt;/requestHandler&gt;</div></pre></td></tr></table></figure></p>
<h3 id="连接Oracle数据库配置"><a href="#连接Oracle数据库配置" class="headerlink" title="连接Oracle数据库配置"></a>连接Oracle数据库配置</h3><p>连接oracle需要ojdbc14.jar，放到solr-6.2.1\server\solr-webapp\webapp\WEB-INF\lib文件夹下<br>solr-6.2.1\server\solr\les\conf文件夹下创建文件db-data-config.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;dataConfig&gt;</div><div class="line">    &lt;dataSource driver=&quot;oracle.jdbc.driver.OracleDriver&quot; url=&quot;jdbc:oracle:thin:@192.168.20.132:1521:orcl&quot; user=&quot;username&quot; password=&quot;pd&quot; /&gt;</div><div class="line">    &lt;document&gt;</div><div class="line">        &lt;entity name=&quot;zhcx&quot; pk=&quot;USERID&quot; query=&quot;select USERID,USERNAME from table&quot;&gt;</div><div class="line">            &lt;field column=&quot;USERID&quot; name=&quot;USERID&quot; /&gt;</div><div class="line">            &lt;field column=&quot;USERNAME&quot; name=&quot;USERNAME&quot; /&gt;</div><div class="line">        &lt;/entity&gt;</div><div class="line">    &lt;/document&gt;</div><div class="line">&lt;/dataConfig&gt;</div></pre></td></tr></table></figure></p>
<p>打开文件managed-schema，搜索uniqueKey，将值改为你的唯一键，该唯一键如果有重复，数据将被覆盖。<br><code>&lt;uniqueKey&gt;USERID&lt;/uniqueKey&gt;</code><br>在该文件中添加配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;field name=&quot;USERID&quot; type=&quot;string&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</div><div class="line">&lt;field name=&quot;USERNAME&quot; type=&quot;string&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</div></pre></td></tr></table></figure></p>
<p>重启solr，Dataimport导入数据,Query进行查询，</p>
<h3 id="配置IKAnalyzer分词"><a href="#配置IKAnalyzer分词" class="headerlink" title="配置IKAnalyzer分词"></a>配置IKAnalyzer分词</h3><p>需要jar包：IKAnalyzer5.2.1.jar，IKAnalyzer版本过低将会报错。<br>将该jar放到solr-6.2.1\server\solr-webapp\webapp\WEB-INF\lib文件夹下<br>managed-schema文件中添加配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- IKAnalyzer 中文分词--&gt; </div><div class="line">&lt;fieldType name=&quot;text_ik&quot; class=&quot;solr.TextField&quot;&gt;  </div><div class="line">  &lt;analyzer class=&quot;org.wltea.analyzer.lucene.IKAnalyzer&quot;/&gt;  </div><div class="line">&lt;/fieldType&gt;</div></pre></td></tr></table></figure></p>
<p>将需要分词的字段type改成text_ik<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;field name=&quot;USERNAME&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="增量索引配置"><a href="#增量索引配置" class="headerlink" title="增量索引配置"></a>增量索引配置</h3><p>配置增量索引需要在表中添加UPDATETIME字段，类型为TIMESTAMP。<br>为oracle配置增量索引时，TIMESTAMP需要处理，否则solr不能识别。为MySql配置增量索引不需要特殊处理。<br>db-data-config.xml文件中oracle增量索引配置如下,<em>USERID必须大写，否则会报deltaQuery has no column to resolve to declared primary key pk=’id’错误</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;dataConfig&gt;</div><div class="line">    &lt;dataSource driver=&quot;oracle.jdbc.driver.OracleDriver&quot; url=&quot;jdbc:oracle:thin:@127.0.0.1:1521:orcl&quot; user=&quot;username&quot; password=&quot;psd&quot; /&gt;</div><div class="line">    &lt;document&gt;</div><div class="line">        &lt;entity name=&quot;zhcx&quot; pk=&quot;USERID&quot; query=&quot;select USERID,USERNAME,CAST(UPDATETIME AS DATE) AS UPDATETIME from TEST &quot;</div><div class="line">deltaImportQuery=&quot;select USERID,USERNAME,CAST(UPDATETIME AS DATE) AS UPDATETIME from TEST where USERID=&apos;$&#123;dataimporter.delta.USERID&#125;&apos;&quot;</div><div class="line">deltaQuery=&quot;select USERID from  TEST where CAST(UPDATETIME AS DATE) &gt; to_date(&apos;$&#123;dataimporter.last_index_time&#125;&apos;,&apos;yyyy-mm-dd hh24:mi:ss&apos;)&quot;</div><div class="line">&gt;</div><div class="line">            &lt;field column=&quot;USERID&quot; name=&quot;USERID&quot; /&gt;</div><div class="line">			&lt;field column=&quot;USERNAME&quot; name=&quot;USERNAME&quot; /&gt;</div><div class="line">			&lt;field column=&quot;UPDATETIME&quot; name=&quot;UPDATETIME&quot; /&gt;</div><div class="line">        &lt;/entity&gt;</div><div class="line">    &lt;/document&gt;</div><div class="line">&lt;/dataConfig&gt;</div></pre></td></tr></table></figure></p>
<p>MySql增量索引配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;dataConfig&gt;</div><div class="line">    &lt;dataSource type=&quot;JdbcDataSource&quot; driver=&quot;com.mysql.jdbc.Driver&quot; url=&quot;jdbc:mysql://localhost:3306/test&quot; user=&quot;root&quot; password=&quot;&quot; /&gt;</div><div class="line">    &lt;document&gt;</div><div class="line">        &lt;entity name=&quot;zhcx&quot; pk=&quot;USERID&quot; query=&quot;select USERID,USERNAME,UPDATETIME from TEST &quot;</div><div class="line">deltaImportQuery=&quot;select USERID,USERNAME,UPDATETIME from TEST where USERID=&apos;$&#123;dataimporter.delta.USERID&#125;&apos;&quot;   </div><div class="line">deltaQuery=&quot;select USERID from  TEST where UPDATETIME &gt; &apos;$&#123;dataimporter.last_index_time&#125;&apos;&quot;</div><div class="line">&gt;</div><div class="line">            &lt;field column=&quot;USERID&quot; name=&quot;USERID&quot; /&gt;</div><div class="line">			&lt;field column=&quot;USERNAME&quot; name=&quot;USERNAME&quot; /&gt;</div><div class="line">			&lt;field column=&quot;UPDATETIME&quot; name=&quot;UPDATETIME&quot; /&gt;</div><div class="line">        &lt;/entity&gt;</div><div class="line">    &lt;/document&gt;</div><div class="line">&lt;/dataConfig&gt;</div></pre></td></tr></table></figure></p>
<p>在managed-schema中添加配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;field name=&quot;UPDATETIME&quot; type=&quot;date&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</div></pre></td></tr></table></figure></p>
<p>配置说明：<br>query:查询数据库表符合记录数据。<br>deltaQuery:增量索引查询主键ID，这个只能返回ID字段。<br>deltaImportQuery:增量索引查询导入的数据。</p>
<p>核心思想：通过内置变量“${dataimporter.delta.id}”和 “${dataimporter.last_index_time}”来记录本次要索引的id和最近一次索引的时间。如果update_date的时间大于配置文件中记录的最后一次更新时间，则该条记录为增量数据。</p>
<h3 id="定时全量实时增量导入数据配置"><a href="#定时全量实时增量导入数据配置" class="headerlink" title="定时全量实时增量导入数据配置"></a>定时全量实时增量导入数据配置</h3><p>设置定时导入数据需要apache-solr-dataimportscheduler-1.0-with-source.jar包，在这个版本的solr中使用会报<code>java.lang.NoSuchMethodError: org.apache.solr.core.SolrResourceLoader.</code>错误，这里提供一个修改后可用的jar包下载：<a href="http://pan.baidu.com/s/1dEY9lxZ" target="_blank" rel="external">solr-dataimportscheduler-1.1-with-source.jar</a>，放到solr-6.2.1\server\solr-webapp\webapp\WEB-INF\lib目录下，在solr-6.2.1\server\solr\conf目录下创建配置文件dataimport.properties，conf文件夹也需要创建，内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">#################################################  </div><div class="line">#                                               #  </div><div class="line">#       dataimport scheduler properties         #  </div><div class="line">#                                               #  </div><div class="line">#################################################  </div><div class="line">  </div><div class="line">#  to sync or not to sync  </div><div class="line">#  1 - active; anything else - inactive  </div><div class="line">syncEnabled=1</div><div class="line"></div><div class="line">#  which cores to schedule  </div><div class="line">#  in a multi-core environment you can decide which cores you want syncronized  </div><div class="line">#  leave empty or comment it out if using single-core deployment  </div><div class="line">syncCores=les</div><div class="line"></div><div class="line">#  solr server name or IP address  </div><div class="line">#  [defaults to localhost if empty]  </div><div class="line">server=localhost</div><div class="line"></div><div class="line">#  solr server port  </div><div class="line">#  [defaults to 80 if empty]  </div><div class="line">port=8983</div><div class="line"></div><div class="line">#  application name/context  </div><div class="line">#  [defaults to current ServletContextListener&apos;s context (app) name]  </div><div class="line">webapp=solr</div><div class="line"></div><div class="line">#  URL params [mandatory]  </div><div class="line">#  remainder of URL  </div><div class="line">#  增量更新的请求参数  </div><div class="line">params=/dataimport?command=delta-import&amp;clean=false&amp;commit=true</div><div class="line"></div><div class="line">#  schedule interval  </div><div class="line">#  number of minutes between two runs  </div><div class="line">#  [defaults to 30 if empty]  </div><div class="line">#  这里配置的是2min一次  </div><div class="line">interval=2</div><div class="line"></div><div class="line">#  重做索引的时间间隔，单位分钟，默认7200，即5天;   </div><div class="line">#  为空,为0,或者注释掉:表示永不重做索引  </div><div class="line">reBuildIndexInterval=1440</div><div class="line"></div><div class="line">#  重做索引的参数  </div><div class="line">reBuildIndexParams=/dataimport?command=full-import&amp;clean=true&amp;commit=true</div><div class="line"></div><div class="line">#  重做索引时间间隔的计时开始时间，第一次真正执行的时间=reBuildIndexBeginTime+reBuildIndexInterval*60*1000；  </div><div class="line">#  两种格式：2012-04-11 03:10:00 或者  03:10:00，后一种会自动补全日期部分为服务启动时的日期  </div><div class="line">reBuildIndexBeginTime=03:10:00</div></pre></td></tr></table></figure></p>
<p><em>如果拷贝这段配置代码，每个配置项后面不能有空格，我因为没注意这个问题折腾了很久。</em></p>
<p>还需要在solr-6.2.1\server\solr-webapp\webapp\WEB-INF\web.xml添加一个监听，在servlet标签前添加如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;listener&gt;    </div><div class="line">  &lt;listener-class&gt;org.apache.solr.handler.dataimport.scheduler.ApplicationListener&lt;/listener-class&gt;    </div><div class="line">&lt;/listener&gt;</div></pre></td></tr></table></figure></p>
<p>定时导入配置完成，每两分钟将会增量导入一次数据，每天全量导入一次数据，可以满足我们的需求。<br>如果配置没有生效，可以查看solr-6.2.1\server\logs目录下的日志。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[学会编写代码生成器]]></title>
      <url>https://lzgh.github.io/2016/09/18/code-generation/</url>
      <content type="html"><![CDATA[<p>编写代码生成器的想法来自于《程序员修理之道》，这本书可以帮助你成为更高效的程序员，我emacs、perl的学习都是来自这本书的建议，确实给我提供了很多帮助。在编码过程中，有意识的提醒自己“编写能编写代码的代码”、“不要重复自己”，就会发现代码生成器的用武之地。<br>写一个新的功能时，要创建action层到dao层的文件，一层一层的写注释、写注入、写方法，于是写了一个增删改查的代码生成器，可以根据配置，生成你需要的文件和方法，这样只需要专注于业务逻辑的编写了。与数据库表字段相关联的代码都可以通过代码生成器来生成，比如实体类、大量字段的表单等。</p>
<p>这是我写后台代码时用的代码生成器演示<br><img src="http://obp3vkygi.qnssl.com/static/images/code_generation.gif"></p>
<p>生成实体类、表单演示<br><img src="http://obp3vkygi.qnssl.com/static/images/quick_create_oracle.gif"></p>
<p>生成增删改查sql演示<br><img src="http://obp3vkygi.qnssl.com/static/images/create_oracle.gif"></p>
<p>开始编写你自己的代码生成器吧~</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[emacs Markdown实时预览]]></title>
      <url>https://lzgh.github.io/2016/08/07/emacs-Markdown%E5%AE%9E%E6%97%B6%E9%A2%84%E8%A7%88/</url>
      <content type="html"><![CDATA[<h1 id="为什么选择使用flymd"><a href="#为什么选择使用flymd" class="headerlink" title="为什么选择使用flymd"></a>为什么选择使用flymd</h1><p>在<a href="http://wikemacs.org/wiki/Markdown#Live_preview_as_you_type" target="_blank" rel="external">这里</a>介绍了几种emacs中预览Markdown的方法，我最终选择的是flymd,在Firefox中可以实时预览、自动滚动，如果使用分屏的话，体验会很好。也尝试了几种方式，Livedown-mode需要通过npm安装livedown,在电脑上总是安装失败，懒得折腾就没有继续尝试；Realtime-preview是在emacs编辑器中实现预览，效果并不理想；Impatient-mode看效果演示视频并不是我想要的。</p>
<h1 id="flymd配置"><a href="#flymd配置" class="headerlink" title="flymd配置"></a>flymd配置</h1><p>flymd的GitHub地址在<a href="https://github.com/mola-T/flymd" target="_blank" rel="external">这里</a><br>使用flymd需要用Firefox预览，虽然有Chrome的解决方案，但不推荐，<br>如果使用的是spacemacs，在dotspacemacs-additional-packages中加入flymd，<br>在dotspacemacs/user-config配置代码如下<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(<span class="name">use-package</span> flymd</div><div class="line">  <span class="symbol">:init</span> (<span class="name">defun</span> my-flymd-browser-function (<span class="name">url</span>)</div><div class="line">    (<span class="name">let</span> ((<span class="name">browse-url-browser-function</span> 'browse-url-firefox))</div><div class="line">      (<span class="name">browse-url</span> url)))</div><div class="line">  (<span class="name">setq</span> flymd-browser-open-function 'my-flymd-browser-function)</div><div class="line">  <span class="symbol">:bind</span> (<span class="string">"C-c C-m"</span> . flymd-flyit)</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>根据GitHub上的配置完成后，使用flymd-flyit预览时并不是我们想要的效果，浏览器打开的文件地址前没有file:///,<br>找到elpa文件夹下的flymd,打开flymd.el文件，搜索<code>funcall flymd-browser-open-function</code>在<code>(flymd-get-output-directory buffer)</code>前加上<code>&quot;file:///&quot;</code><br>修改后的代码如下<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="name">funcall</span> flymd-browser-open-function</div><div class="line">	(<span class="name">concat</span> <span class="string">"file:///"</span> (<span class="name">flymd-get-output-directory</span> buffer) flymd-preview-html-filename))</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p> <strong>修改完后，要将该文件重新编译或者删除flymd.elc文件，否则修改无效</strong></p>
<h1 id="修改flymd预览文件生成的地址"><a href="#修改flymd预览文件生成的地址" class="headerlink" title="修改flymd预览文件生成的地址"></a>修改flymd预览文件生成的地址</h1><p>这一步操作是可选的，我用hexo写博客预览时，不希望flymd.md文件生成在博客的目录下，<br>在.spacemacs文件中加入<br><code>(setq flymd-output-directory &quot;F:/&quot;)</code><br>设置输出目录后，flymd.md会生成在该目录下的MD5文件夹中，我只想生成一个flymd.md，不需要那么多MD5方式产生的文件夹，<br>和之前一样，修改flymd.el文件<br>搜索<code>md5</code>，删除<code>(secure-hash &#39;md5 (buffer-file-name buffer))</code>(注意括号，不要删多了)<br>这样只会在F盘下生成一个flymd.md文件，大功告成。<br>如果要预览的文件中引用了本地的图片，那么路径就不对了，就不能显示出图片。推荐使用七牛云存储图片，就没有这个问题。<br>最后附上一张效果图<br><img src="http://obp3vkygi.qnssl.com/static/images/flymd.png"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Strawberry Perl安装]]></title>
      <url>https://lzgh.github.io/2016/08/06/Strawberry-Perl%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="为什么选择-Strawberry-Perl"><a href="#为什么选择-Strawberry-Perl" class="headerlink" title="为什么选择 Strawberry Perl"></a>为什么选择 Strawberry Perl</h1><p>由于手动安装DBD::Oracle模块经常失败，所以选择了Strawberry Perl，它内置了很多模块，省去了安装各种模块的麻烦。</p>
<h1 id="Oracle-Instant-Client环境配置"><a href="#Oracle-Instant-Client环境配置" class="headerlink" title="Oracle Instant Client环境配置"></a>Oracle Instant Client环境配置</h1><p>为了能够正常连接Oracle数据库，先配置Oracle Instant Clint，再安装Strawberry Perl<br>Oracle Instant Client官方下载地址：<a href="http://www.oracle.com/technetwork/database/features/instant-client/index-097480.html" target="_blank" rel="external">Oracle Instant Client</a><br>配置Oracle Instant Client需要以下三个包<br>instantclient-basic-zip<br>instantclient-sdk.zip<br>instantclient-sqlplus.zip<br>将他们解压到同一文件夹下。<br>也可以在百度网盘下载完整压缩包，<br>百度网盘地址：<a href="http://yun.baidu.com/share/link?shareid=2601558786&amp;uk=372314040" target="_blank" rel="external">百度网盘</a><br><strong>将该文件夹添加到Path环境变量，如PATH:F:\instantclient_12_1;</strong><br>配置完环境变量后可以安装Strawberry Perl</p>
<h1 id="Strawberry-Perl安装"><a href="#Strawberry-Perl安装" class="headerlink" title="Strawberry Perl安装"></a>Strawberry Perl安装</h1><p>Strawberry Perl官方下载地址：<a href="http://strawberryperl.com/" target="_blank" rel="external">Strawberry Perl</a><br>百度网盘地址：<a href="http://pan.baidu.com/s/1slzl07b" target="_blank" rel="external">百度网盘</a><br>下载完成按正常流程安装即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[notepad++配置perl运行环境]]></title>
      <url>https://lzgh.github.io/2016/08/06/notepad-%E9%85%8D%E7%BD%AEperl%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h1 id="1-安装NppExec插件"><a href="#1-安装NppExec插件" class="headerlink" title="1 安装NppExec插件"></a>1 安装NppExec插件</h1><ul>
<li>插件—&gt;Plugin Manager—&gt;show  Plugin Manager。<img src="http://obp3vkygi.qnssl.com/static/images/notepad_1.png"></li>
<li>选取NppExec插件，然后点击Install<img src="http://obp3vkygi.qnssl.com/static/images/notepad_2.png">
<a id="more"></a>
<h1 id="2-配置编译perl"><a href="#2-配置编译perl" class="headerlink" title="2 配置编译perl"></a>2 配置编译perl</h1></li>
<li>按下F6出现出现输入框，输入perl “$(FULL_CURRENT_PATH)”点击保存<img src="http://obp3vkygi.qnssl.com/static/images/notepad_3.png">
<h1 id="3-配置NppExec"><a href="#3-配置NppExec" class="headerlink" title="3 配置NppExec"></a>3 配置NppExec</h1></li>
<li>打开Advanced Options配置信息<img src="http://obp3vkygi.qnssl.com/static/images/notepad_4.png">
<img src="http://obp3vkygi.qnssl.com/static/images/notepad_5.png">
<h1 id="4-配置快捷键"><a href="#4-配置快捷键" class="headerlink" title="4 配置快捷键"></a>4 配置快捷键</h1><img src="http://obp3vkygi.qnssl.com/static/images/notepad_6.png">
<img src="http://obp3vkygi.qnssl.com/static/images/notepad_7.png">
</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
